From da27a01a3dbab9d260210ffa885c1da8c6bbb23a Mon Sep 17 00:00:00 2001
From: Peter Tsun Ho Pang <t.h.pang@nikhef.nl>
Date: Thu, 17 Jun 2021 19:42:33 +0200
Subject: [PATCH 1/6] Adding EOS conversion function

---
 bilby/gw/conversion.py | 46 ++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 46 insertions(+)

diff --git a/bilby/gw/conversion.py b/bilby/gw/conversion.py
index ad198143..e2346653 100644
--- a/bilby/gw/conversion.py
+++ b/bilby/gw/conversion.py
@@ -5,6 +5,7 @@ import multiprocessing
 from tqdm import tqdm
 import numpy as np
 from pandas import DataFrame
+from scipy.interpolate import interp1d
 
 from ..core.likelihood import MarginalizedLikelihoodReconstructionError
 from ..core.utils import logger, solar_mass
@@ -353,6 +354,51 @@ def convert_to_lal_binary_neutron_star_parameters(parameters):
     return converted_parameters, added_keys
 
 
+class eos_convert_function():
+    def __init__(self, path2data, Neos):
+        self.path2data = path2data
+        self.Neos = Neos
+        self.eos_interp_dict = {}
+        for EOSID in range(1, self.Neos + 1):
+            radius, mass, Lambda = np.loadtxt('{0}/{1}.dat'.format(self.path2data, EOSID),
+                                              unpack=True, usecols=[0, 1, 2])
+            interp_mass_lambda = interp1d(mass, Lambda, kind='linear')
+            interp_mass_radius = interp1d(mass, radius, kind='linear')
+            self.eos_interp_dict[EOSID] = [interp_mass_lambda, interp_mass_radius]
+
+    def convert_to_lal_binary_neutron_star_parameters_with_eos(self, parameters):
+
+        converted_parameters = parameters.copy()
+        converted_parameters, added_keys =\
+            convert_to_lal_binary_black_hole_parameters(converted_parameters)
+
+        converted_parameters['redshift'] = luminosity_distance_to_redshift(converted_parameters['luminosity_distance'])
+        mass_1_source = converted_parameters['mass_1'] / (1. + converted_parameters['redshift'])
+        mass_2_source = converted_parameters['mass_2'] / (1. + converted_parameters['redshift'])
+
+        EOSID = int(parameters['EOS']) + 1
+        LambdaM = self.eos_interp_dict[EOSID][0]
+
+        if (mass_1_source < LambdaM.x[0] or
+            mass_1_source > LambdaM.x[-1] or
+            mass_2_source < LambdaM.x[0] or
+            mass_2_source > LambdaM.x[-1]):
+
+            lambda1 = -1.
+            lambda2 = -1.
+
+        else:
+            lambda1 = LambdaM(mass_1_source)
+            lambda2 = LambdaM(mass_2_source)
+
+        converted_parameters['lambda_1'] = lambda1
+        converted_parameters['lambda_2'] = lambda2
+
+        added_keys = added_keys + ['lambda_1', 'lambda_2']
+
+        return converted_parameters, added_keys
+
+
 def eos_family_physical_check(eos):
     """
     Function that determines if the EoS family contains
-- 
2.26.2

