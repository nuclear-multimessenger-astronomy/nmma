name: Unit Test nmma [ubuntu]

on:
  push:
    branches: [main]
    paths-ignore:
      - "doc/**"
  pull_request:
    branches: [main]
    paths-ignore:
      - "doc/**"
  workflow_dispatch:

jobs:
  build:
    runs-on: "ubuntu-latest"
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout branch being tested
        uses: actions/checkout@v4

      - name: Set up Python with Conda ${{ matrix.python-version }}
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ matrix.python-version }}
          miniforge-version: latest
          use-mamba: true
          mamba-version: "*"
          activate-environment: nmma_env
          channels: defaults

      - name: Restore SVD models from cache
        uses: actions/cache/restore@v4
        with:
          path: svdmodels
          key: svdmodels-${{ hashFiles('**/LICENSE') }}
          restore-keys: svdmodels-

      - name: Get pip cache dir
        id: pip-cache
        run: |
          python -m pip install --upgrade pip setuptools wheel
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

      - name: Restore pip cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-2-${{ hashFiles('**/pyproject.toml', '**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-2-

      - name: Install Linux Dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: openmpi-bin libopenmpi-dev gfortran build-essential libblas3 libblas-dev liblapack3 liblapack-dev libatlas-base-dev texlive texlive-latex-extra texlive-fonts-recommended dvipng cm-super
          execute_install_scripts: true

      - name: Install dependencies (Ubuntu)
        run: |
          sudo apt-get update
          sudo apt-get install -y texlive texlive-latex-extra texlive-fonts-recommended dvipng cm-super python3-mpi4py

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade git+https://github.com/bitranox/wrapt_timeout_decorator.git
          python -m pip install pytest pytest-cov flake8 pytest-aiohttp sqlparse freezegun PyJWT joblib coveralls
          python -m pip install -r  ml_requirements.txt -r grb_requirements.txt -r tf_requirements.txt -r sklearn_requirements.txt
          python -m pip install .
          git clone https://github.com/JohannesBuchner/MultiNest && cd MultiNest/build && rm -rf * && cmake -DCMAKE_POLICY_VERSION_MINIMUM=3.5 .. && make && cd ../..

      - name: Export Libraries
        run: |
          echo "LD_LIBRARY_PATH=$GITHUB_WORKSPACE/MultiNest/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "DYLD_LIBRARY_PATH=$GITHUB_WORKSPACE/MultiNest/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude docs
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude docs,versioneer.py,nmma/_version.py,nmma/tests,nmma/*/__init__.py

      - name: Test with pytest
        run: |
          echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
          echo "DYLD_LIBRARY_PATH: $DYLD_LIBRARY_PATH"
          python -m coverage run --source nmma -m pytest nmma/tests/*.py
        env:
          LD_LIBRARY_PATH: ${{ env.LD_LIBRARY_PATH }}
          DYLD_LIBRARY_PATH: ${{ env.DYLD_LIBRARY_PATH }}

      - name: Run Coveralls
        if: ${{ success() }}
        run: |
          coveralls --service=github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Save SVD models cache
        uses: actions/cache/save@v4
        if: always()
        with:
          path: svdmodels
          key: svdmodels-${{ hashFiles('**/LICENSE') }}

      - name: Save pip cache
        uses: actions/cache/save@v4
        if: always()
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-2-${{ hashFiles('**/pyproject.toml', '**/requirements.txt') }}
