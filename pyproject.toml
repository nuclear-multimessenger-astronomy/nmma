[build-system]
requires = ["setuptools>=45", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "nmma"
authors = [
    {name = "Peter Tsun Ho Pang, Michael Coughlin, Tim Dietrich, Ingo Tews", email = "nuclear_multimessenger_astronomy@googlegroups.com"}
]
description = "A nuclear physics multi-messenger Bayesian inference library"
readme = "README.md"
requires-python = ">=3.9, <3.13"
license = {text = "GPLv3"}
classifiers = [
    "Programming Language :: Python :: 3",
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Intended Audience :: Science/Research',
    'Intended Audience :: End Users/Desktop',
    'Intended Audience :: Developers',
    'Natural Language :: English',
    'Topic :: Scientific/Engineering',
    'Topic :: Scientific/Engineering :: Astronomy',
    'Topic :: Scientific/Engineering :: Physics',
    'Operating System :: POSIX',
    'Operating System :: Unix',
    'Operating System :: MacOS',
    'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',
]
dynamic = ["dependencies", "optional-dependencies", "version"]


[tool.setuptools.dynamic]
version = {attr = "nmma.__version__"}
dependencies = {file = ["requirements.txt"]}
optional-dependencies.doc = { file = ["doc_requirements.txt"] }
optional-dependencies.grb = { file = ["grb_requirements.txt"] }
optional-dependencies.production = { file = ["production_requirements.txt"] }
optional-dependencies.neuralnet = { file = ["ml_requirements.txt"] }
optional-dependencies.training = { file = ["training_requirements.txt"] }
optional-dependencies.sampler = { file = ["sampler_requirements.txt"] }

[project.scripts]
nmma-generation = "nmma.pbilby.generation:nmma_generation"
nmma-analysis = "nmma.pbilby.analysis:nmma_analysis"
lightcurve-analysis = "nmma.em.analysis:main"
lightcurve-analysis-lbol = "nmma.em.analysis:lbol_main"
lightcurve-injection-slurm-setup = "nmma.em.slurm_handling:main"
combine-EOS = "nmma.post_processing.ns_characteristics:main"
create-lightcurve-slurm = "nmma.em.slurm_handling:lc_creation"
create-svdmodel = "nmma.em.create_svdmodel:main"
svdmodel-benchmark = "nmma.em.svdmodel_benchmark:main"
plot-svdmodel-benchmarks = "tools.plot_svdmodel_benchmarks:main"
svdmodel-download = "nmma.utils.models:main"
lightcurve-generation = "nmma.em.lightcurve_handling:create_lightcurves_from_injection_parameters"
nmma-create-injection = "nmma.joint.create_injection:main"
gwem-resampling = "nmma.post_processing.ejecta_resampling:main_resampling"
gwem-Hubble-estimate = "nmma.post_processing.hubble_estimates:main"
convert-skyportal-lcs = "tools.convert_skyportal_lcs:main"
resample-grid = "tools.resample_grid:main"
multi-config-analysis = "nmma.em.multi_config_analysis:main"

[project.urls]
Homepage = "https://github.com/nuclear-multimessenger-astronomy/nmma"
Documentation = "https://nuclear-multimessenger-astronomy.github.io/nmma/"
Download = "https://pypi.org/project/nmma/#files"
Tracker = "https://github.com/nuclear-multimessenger-astronomy/nmma/issues"

[tool.setuptools.packages.find]
include = ["nmma*", "tools*"]

[tool.setuptools.package-data]
gwemopt = ['data/*/*']

[tool.coverage.run]
source = ["nmma"]
omit = [
    "nmma/tests/*",
    "nmma/__main__.py",
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __repr__",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    "raise KeyError",
    "except KeyError",
    "raise ValueError",
    "except JSONDecodeError:",
    "raise requests.exceptions.RequestException",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if False:",
    'if __name__ == "__main__":',
    "err =",
    "logger.error",
    "raise"
    ]
ignore_errors = true

[tool.isort]
profile = "black"

[tool.pytest.ini_options]
addopts = "--verbose -r s"

[tool.bumpver]
current_version = "0.2.2"
version_pattern = "MAJOR.MINOR.PATCH[PYTAGNUM]"
commit_message = "bump version {old_version} -> {new_version}"
commit = true
tag = true
push = true

[tool.bumpver.file_patterns]
"pyproject.toml" = ['current_version = "{version}"']
"nmma/__init__.py" = ['__version__ = "{version}"']
